service: aesi-audit-trail
frameworkVersion: '2 || 3'
useDotenv: true
variablesResolutionMode: 20210326

custom:
  companyName: 'cargill'
  tableName: aesi-audit-trail
  topicName: '${self:custom.companyName}-aesi-audit-trail-${sls:stage}'
  topicArn:
    Fn::Join:
      - ''
      - - 'arn:aws:sns:'
        - Ref: AWS::Region
        - ":"
        - Ref: AWS::AccountId
        - ":"
        - Fn::GetAtt:
          - AesiAuditTrailTopic
          - TopicName
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
  serverless-offline-sns:
    port: 4002 # a free port for the sns server to run on
    debug: true
    accountId: 515071363261
  webServiceEndpoint:
        Fn::Join:
          - ''
          - - 'https://'
            - Ref: ApiGatewayRestApi
            - '.execute-api.'
            - Ref: AWS::Region
            - '.amazonaws.com'
provider:
  region: ap-northeast-1
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ LogsTable, Arn ]
        - Effect: Allow
          Action:
            - SNS:Subscribe
            - SNS:Publish
          Resource:
            - 'arn:aws:sns:${aws:region}:${aws:accountId}:${self:custom.topicName}'
        - Effect: Allow
          Action:
            - 'ssm:GetParameter'
            - 'ssm:PutParameter'
          Resource:
            - 'arn:aws:ssm:${aws:region}:${aws:accountId}:${self:custom.topicName}'
  environment:
    LOGS_TABLE: '${self:custom.companyName}-${self:custom.tableName}-${sls:stage}'
    AUDIT_SNS_TOPIC: 'arn:aws:sns:${aws:region}:${aws:accountId}:${self:custom.topicName}'

functions:
  receiveSns:
    handler: src/handler.receiveSns
    events:
      - sns: arn:aws:sns:${aws:region}:${aws:accountId}:${self:custom.topicName}
  logs:
    handler: src/handler.getAuditTrails
    events:
    - http:
          path: logs
          method: get
          cors: true

resources:
  Resources:
    LogsTable:
      Type: AWS::DynamoDB::Table
      #DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: aesiModule
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: N
          - AttributeName: userId
            AttributeType: S        
        KeySchema:
          - AttributeName: aesiModule
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: aesiModuleIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: 'ALL'
        BillingMode: PAY_PER_REQUEST
        TableName: '${self:custom.companyName}-${self:custom.tableName}-${sls:stage}'
    AesiAuditTrailTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: 'AESI Audit Trail SNS'
        TopicName: ${self:custom.topicName}
    SNSArn:
      Type: 'AWS::SSM::Parameter'
      Properties:
        Name: '${self:custom.topicName}-sns-arn'
        Type: String
        Value: 'arn:aws:sns:${aws:region}:${aws:accountId}:${self:custom.topicName}'
    ApiEndpoint:
      Type: 'AWS::SSM::Parameter'
      Properties:
        Name: '${self:custom.companyName}-${self:custom.tableName}-${sls:stage}-api-endpoint'
        Type: String
        Value: ${self:custom.webServiceEndpoint}
plugins:
  - serverless-dynamodb-local
  - serverless-offline-sns
  - serverless-offline
package:
  exclude:
      - ./**
  include:
    - src/**
    - node_modules/**
